/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ClientService_H
#define ClientService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "node_client_types.h"

namespace csci_5105 { namespace PA1 {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class ClientServiceIf {
 public:
  virtual ~ClientServiceIf() {}
  virtual void readFile(std::string& _return, const std::string& fileName) = 0;
  virtual int32_t writeFile(const  ::csci_5105::PA1::File& file) = 0;
};

class ClientServiceIfFactory {
 public:
  typedef ClientServiceIf Handler;

  virtual ~ClientServiceIfFactory() {}

  virtual ClientServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ClientServiceIf* /* handler */) = 0;
};

class ClientServiceIfSingletonFactory : virtual public ClientServiceIfFactory {
 public:
  ClientServiceIfSingletonFactory(const boost::shared_ptr<ClientServiceIf>& iface) : iface_(iface) {}
  virtual ~ClientServiceIfSingletonFactory() {}

  virtual ClientServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ClientServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<ClientServiceIf> iface_;
};

class ClientServiceNull : virtual public ClientServiceIf {
 public:
  virtual ~ClientServiceNull() {}
  void readFile(std::string& /* _return */, const std::string& /* fileName */) {
    return;
  }
  int32_t writeFile(const  ::csci_5105::PA1::File& /* file */) {
    int32_t _return = 0;
    return _return;
  }
};

typedef struct _ClientService_readFile_args__isset {
  _ClientService_readFile_args__isset() : fileName(false) {}
  bool fileName :1;
} _ClientService_readFile_args__isset;

class ClientService_readFile_args {
 public:

  ClientService_readFile_args(const ClientService_readFile_args&);
  ClientService_readFile_args& operator=(const ClientService_readFile_args&);
  ClientService_readFile_args() : fileName() {
  }

  virtual ~ClientService_readFile_args() throw();
  std::string fileName;

  _ClientService_readFile_args__isset __isset;

  void __set_fileName(const std::string& val);

  bool operator == (const ClientService_readFile_args & rhs) const
  {
    if (!(fileName == rhs.fileName))
      return false;
    return true;
  }
  bool operator != (const ClientService_readFile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_readFile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClientService_readFile_pargs {
 public:


  virtual ~ClientService_readFile_pargs() throw();
  const std::string* fileName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientService_readFile_result__isset {
  _ClientService_readFile_result__isset() : success(false) {}
  bool success :1;
} _ClientService_readFile_result__isset;

class ClientService_readFile_result {
 public:

  ClientService_readFile_result(const ClientService_readFile_result&);
  ClientService_readFile_result& operator=(const ClientService_readFile_result&);
  ClientService_readFile_result() : success() {
  }

  virtual ~ClientService_readFile_result() throw();
  std::string success;

  _ClientService_readFile_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const ClientService_readFile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ClientService_readFile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_readFile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientService_readFile_presult__isset {
  _ClientService_readFile_presult__isset() : success(false) {}
  bool success :1;
} _ClientService_readFile_presult__isset;

class ClientService_readFile_presult {
 public:


  virtual ~ClientService_readFile_presult() throw();
  std::string* success;

  _ClientService_readFile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ClientService_writeFile_args__isset {
  _ClientService_writeFile_args__isset() : file(false) {}
  bool file :1;
} _ClientService_writeFile_args__isset;

class ClientService_writeFile_args {
 public:

  ClientService_writeFile_args(const ClientService_writeFile_args&);
  ClientService_writeFile_args& operator=(const ClientService_writeFile_args&);
  ClientService_writeFile_args() {
  }

  virtual ~ClientService_writeFile_args() throw();
   ::csci_5105::PA1::File file;

  _ClientService_writeFile_args__isset __isset;

  void __set_file(const  ::csci_5105::PA1::File& val);

  bool operator == (const ClientService_writeFile_args & rhs) const
  {
    if (!(file == rhs.file))
      return false;
    return true;
  }
  bool operator != (const ClientService_writeFile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_writeFile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClientService_writeFile_pargs {
 public:


  virtual ~ClientService_writeFile_pargs() throw();
  const  ::csci_5105::PA1::File* file;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientService_writeFile_result__isset {
  _ClientService_writeFile_result__isset() : success(false) {}
  bool success :1;
} _ClientService_writeFile_result__isset;

class ClientService_writeFile_result {
 public:

  ClientService_writeFile_result(const ClientService_writeFile_result&);
  ClientService_writeFile_result& operator=(const ClientService_writeFile_result&);
  ClientService_writeFile_result() : success(0) {
  }

  virtual ~ClientService_writeFile_result() throw();
  int32_t success;

  _ClientService_writeFile_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const ClientService_writeFile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ClientService_writeFile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_writeFile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientService_writeFile_presult__isset {
  _ClientService_writeFile_presult__isset() : success(false) {}
  bool success :1;
} _ClientService_writeFile_presult__isset;

class ClientService_writeFile_presult {
 public:


  virtual ~ClientService_writeFile_presult() throw();
  int32_t* success;

  _ClientService_writeFile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ClientServiceClient : virtual public ClientServiceIf {
 public:
  ClientServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ClientServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void readFile(std::string& _return, const std::string& fileName);
  void send_readFile(const std::string& fileName);
  void recv_readFile(std::string& _return);
  int32_t writeFile(const  ::csci_5105::PA1::File& file);
  void send_writeFile(const  ::csci_5105::PA1::File& file);
  int32_t recv_writeFile();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ClientServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<ClientServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ClientServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_readFile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_writeFile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ClientServiceProcessor(boost::shared_ptr<ClientServiceIf> iface) :
    iface_(iface) {
    processMap_["readFile"] = &ClientServiceProcessor::process_readFile;
    processMap_["writeFile"] = &ClientServiceProcessor::process_writeFile;
  }

  virtual ~ClientServiceProcessor() {}
};

class ClientServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ClientServiceProcessorFactory(const ::boost::shared_ptr< ClientServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< ClientServiceIfFactory > handlerFactory_;
};

class ClientServiceMultiface : virtual public ClientServiceIf {
 public:
  ClientServiceMultiface(std::vector<boost::shared_ptr<ClientServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ClientServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<ClientServiceIf> > ifaces_;
  ClientServiceMultiface() {}
  void add(boost::shared_ptr<ClientServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void readFile(std::string& _return, const std::string& fileName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->readFile(_return, fileName);
    }
    ifaces_[i]->readFile(_return, fileName);
    return;
  }

  int32_t writeFile(const  ::csci_5105::PA1::File& file) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->writeFile(file);
    }
    return ifaces_[i]->writeFile(file);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class ClientServiceConcurrentClient : virtual public ClientServiceIf {
 public:
  ClientServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ClientServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void readFile(std::string& _return, const std::string& fileName);
  int32_t send_readFile(const std::string& fileName);
  void recv_readFile(std::string& _return, const int32_t seqid);
  int32_t writeFile(const  ::csci_5105::PA1::File& file);
  int32_t send_writeFile(const  ::csci_5105::PA1::File& file);
  int32_t recv_writeFile(const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

}} // namespace

#endif
