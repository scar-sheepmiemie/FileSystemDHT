/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef NodeService_H
#define NodeService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "node_node_types.h"

namespace csci_5105 { namespace PA1 {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class NodeServiceIf {
 public:
  virtual ~NodeServiceIf() {}
  virtual int32_t updateDHT(const  ::csci_5105::PA1::SingleNode& newNode) = 0;
  virtual int32_t transitFiles(const  ::csci_5105::PA1::File& file) = 0;
};

class NodeServiceIfFactory {
 public:
  typedef NodeServiceIf Handler;

  virtual ~NodeServiceIfFactory() {}

  virtual NodeServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(NodeServiceIf* /* handler */) = 0;
};

class NodeServiceIfSingletonFactory : virtual public NodeServiceIfFactory {
 public:
  NodeServiceIfSingletonFactory(const boost::shared_ptr<NodeServiceIf>& iface) : iface_(iface) {}
  virtual ~NodeServiceIfSingletonFactory() {}

  virtual NodeServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(NodeServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<NodeServiceIf> iface_;
};

class NodeServiceNull : virtual public NodeServiceIf {
 public:
  virtual ~NodeServiceNull() {}
  int32_t updateDHT(const  ::csci_5105::PA1::SingleNode& /* newNode */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t transitFiles(const  ::csci_5105::PA1::File& /* file */) {
    int32_t _return = 0;
    return _return;
  }
};

typedef struct _NodeService_updateDHT_args__isset {
  _NodeService_updateDHT_args__isset() : newNode(false) {}
  bool newNode :1;
} _NodeService_updateDHT_args__isset;

class NodeService_updateDHT_args {
 public:

  NodeService_updateDHT_args(const NodeService_updateDHT_args&);
  NodeService_updateDHT_args& operator=(const NodeService_updateDHT_args&);
  NodeService_updateDHT_args() {
  }

  virtual ~NodeService_updateDHT_args() throw();
   ::csci_5105::PA1::SingleNode newNode;

  _NodeService_updateDHT_args__isset __isset;

  void __set_newNode(const  ::csci_5105::PA1::SingleNode& val);

  bool operator == (const NodeService_updateDHT_args & rhs) const
  {
    if (!(newNode == rhs.newNode))
      return false;
    return true;
  }
  bool operator != (const NodeService_updateDHT_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NodeService_updateDHT_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class NodeService_updateDHT_pargs {
 public:


  virtual ~NodeService_updateDHT_pargs() throw();
  const  ::csci_5105::PA1::SingleNode* newNode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _NodeService_updateDHT_result__isset {
  _NodeService_updateDHT_result__isset() : success(false) {}
  bool success :1;
} _NodeService_updateDHT_result__isset;

class NodeService_updateDHT_result {
 public:

  NodeService_updateDHT_result(const NodeService_updateDHT_result&);
  NodeService_updateDHT_result& operator=(const NodeService_updateDHT_result&);
  NodeService_updateDHT_result() : success(0) {
  }

  virtual ~NodeService_updateDHT_result() throw();
  int32_t success;

  _NodeService_updateDHT_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const NodeService_updateDHT_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const NodeService_updateDHT_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NodeService_updateDHT_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _NodeService_updateDHT_presult__isset {
  _NodeService_updateDHT_presult__isset() : success(false) {}
  bool success :1;
} _NodeService_updateDHT_presult__isset;

class NodeService_updateDHT_presult {
 public:


  virtual ~NodeService_updateDHT_presult() throw();
  int32_t* success;

  _NodeService_updateDHT_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _NodeService_transitFiles_args__isset {
  _NodeService_transitFiles_args__isset() : file(false) {}
  bool file :1;
} _NodeService_transitFiles_args__isset;

class NodeService_transitFiles_args {
 public:

  NodeService_transitFiles_args(const NodeService_transitFiles_args&);
  NodeService_transitFiles_args& operator=(const NodeService_transitFiles_args&);
  NodeService_transitFiles_args() {
  }

  virtual ~NodeService_transitFiles_args() throw();
   ::csci_5105::PA1::File file;

  _NodeService_transitFiles_args__isset __isset;

  void __set_file(const  ::csci_5105::PA1::File& val);

  bool operator == (const NodeService_transitFiles_args & rhs) const
  {
    if (!(file == rhs.file))
      return false;
    return true;
  }
  bool operator != (const NodeService_transitFiles_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NodeService_transitFiles_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class NodeService_transitFiles_pargs {
 public:


  virtual ~NodeService_transitFiles_pargs() throw();
  const  ::csci_5105::PA1::File* file;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _NodeService_transitFiles_result__isset {
  _NodeService_transitFiles_result__isset() : success(false) {}
  bool success :1;
} _NodeService_transitFiles_result__isset;

class NodeService_transitFiles_result {
 public:

  NodeService_transitFiles_result(const NodeService_transitFiles_result&);
  NodeService_transitFiles_result& operator=(const NodeService_transitFiles_result&);
  NodeService_transitFiles_result() : success(0) {
  }

  virtual ~NodeService_transitFiles_result() throw();
  int32_t success;

  _NodeService_transitFiles_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const NodeService_transitFiles_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const NodeService_transitFiles_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NodeService_transitFiles_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _NodeService_transitFiles_presult__isset {
  _NodeService_transitFiles_presult__isset() : success(false) {}
  bool success :1;
} _NodeService_transitFiles_presult__isset;

class NodeService_transitFiles_presult {
 public:


  virtual ~NodeService_transitFiles_presult() throw();
  int32_t* success;

  _NodeService_transitFiles_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class NodeServiceClient : virtual public NodeServiceIf {
 public:
  NodeServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  NodeServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t updateDHT(const  ::csci_5105::PA1::SingleNode& newNode);
  void send_updateDHT(const  ::csci_5105::PA1::SingleNode& newNode);
  int32_t recv_updateDHT();
  int32_t transitFiles(const  ::csci_5105::PA1::File& file);
  void send_transitFiles(const  ::csci_5105::PA1::File& file);
  int32_t recv_transitFiles();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class NodeServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<NodeServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (NodeServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_updateDHT(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_transitFiles(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  NodeServiceProcessor(boost::shared_ptr<NodeServiceIf> iface) :
    iface_(iface) {
    processMap_["updateDHT"] = &NodeServiceProcessor::process_updateDHT;
    processMap_["transitFiles"] = &NodeServiceProcessor::process_transitFiles;
  }

  virtual ~NodeServiceProcessor() {}
};

class NodeServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  NodeServiceProcessorFactory(const ::boost::shared_ptr< NodeServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< NodeServiceIfFactory > handlerFactory_;
};

class NodeServiceMultiface : virtual public NodeServiceIf {
 public:
  NodeServiceMultiface(std::vector<boost::shared_ptr<NodeServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~NodeServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<NodeServiceIf> > ifaces_;
  NodeServiceMultiface() {}
  void add(boost::shared_ptr<NodeServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t updateDHT(const  ::csci_5105::PA1::SingleNode& newNode) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateDHT(newNode);
    }
    return ifaces_[i]->updateDHT(newNode);
  }

  int32_t transitFiles(const  ::csci_5105::PA1::File& file) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->transitFiles(file);
    }
    return ifaces_[i]->transitFiles(file);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class NodeServiceConcurrentClient : virtual public NodeServiceIf {
 public:
  NodeServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  NodeServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t updateDHT(const  ::csci_5105::PA1::SingleNode& newNode);
  int32_t send_updateDHT(const  ::csci_5105::PA1::SingleNode& newNode);
  int32_t recv_updateDHT(const int32_t seqid);
  int32_t transitFiles(const  ::csci_5105::PA1::File& file);
  int32_t send_transitFiles(const  ::csci_5105::PA1::File& file);
  int32_t recv_transitFiles(const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

}} // namespace

#endif
