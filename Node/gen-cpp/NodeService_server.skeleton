// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "NodeService.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::csci_5105::PA1;

class NodeServiceHandler : virtual public NodeServiceIf {
 public:
  NodeServiceHandler() {
    // Your initialization goes here
  }

  int32_t updateDHT(const  ::csci_5105::PA1::SingleNode& newNode) {
    // Your implementation goes here
    printf("updateDHT\n");
  }

  int32_t transitFiles(const  ::csci_5105::PA1::File& file) {
    // Your implementation goes here
    printf("transitFiles\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<NodeServiceHandler> handler(new NodeServiceHandler());
  shared_ptr<TProcessor> processor(new NodeServiceProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

